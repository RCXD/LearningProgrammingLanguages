week('2020-08-08')
week('2020-08-01')
weekdays('2020-08-08')
weekdays(3)
weekdays.date(3)
weekdays.date(x)
#5. addition of date
days(1)
day(2020-08-08)
day('2020-08-08')
days(now()+1)
days(date(now())+1)
date(now()+days(1))
date(now()-days(7))
date(now()-days(7))
date(now()+days(1))
date(now()+days(7))
date(now()-days(7))
date(now()-days(-1))
now()-days(-1)
#A1
now()+days(1)
now()+weeks(1/7)
now()+week(1)
#A3
now()-days(7)
#A2
now()+days(7)
now()+weeks(1) #correct
now()+week(1) #error
_a = 1
$a = 1
a$ = 1
'1' -> c
a <- '1'
'1' -> c
a <- 1
'1' -> c
d = '1'
가 <- 1
가; <- 1
가;; <- 1
#=========================#
#Practice
typeof(a)
a_b = 3
#Q2 change a's value into 2
a <- 2
#Q3 현재날짜 crr에 저장
library(lubridate)
crr <- now()
crr
#Q4 : ccr 웗 변경
crr <- crr - months(6)
crr
char1 <- paste(char2)
#Testing
char1 <- 'Hello!'
char2 <- 'World'
char1 <- paste(char2)
char1
#Testing
char1 <- 'Hello!'
#A4 :
month(crr) <- 2
crr
week(crr) <- 30
crr
week(now())
week(crr) <- 32
crr
week(now())
week(crr) <- now()
week(crr) <- week(now())
char1 <- paste(char1, char2)
char1
char1 <- paste0(char1, char2)
char1
char1 <- paste0('Hello', char2)
char1
char3 <- paste(char1, char2, set="") #공백삭제제
char3
char3 <- paste('Hello', char2, set="") #공백삭제제
char3
1e3
#2. exponentials
1000
10000000
10e7
1e7
1e+7
1e-7
#3 Comparator
#Return : "Logical"
typeof(4>3)
#3 Comparator
#Return : "Logical"
typeof(4>3+4/3)
#3 Comparator
#Return : "Logical"
typeof(4>3+4>3)
#3 Comparator
#Return : "Logical"
typeof((4>3)+(4>3)
#3 Comparator
#Return : "Logical"
typeof((4>3)+(4>3))
#3 Comparator
#Return : "Logical"
typeof((4>3)+(4>3))
x == 10
x == y
x == y
x <- 10
y <- 20
x == y
x != y
'가'='가'
'가'='가'
'가'==가'
#=========================#
#Practice
#Q1 type
typeof(a)
#Q2 change a's value into 2
'가'=='가'
#4. Logical operators
## !, |, &
\a = 2
#4. Logical operators
## !, |, &
a\ = 2
#4. Logical operators
## !, |, &
a$b = 2
b <- FALSE
a & !b
a & (!b)
#4. Logical operators
## !, |, &
a <- TRUE
b <- FALSE
a & (!b)
a & !b
a || !b
!a && !a
!a && a
a && a
!a & & a
a <- a+1
a <- a+1
a <- a+1
a <- a+1
a <- a+1
a <- a+1
a <- a+1
a
a <- a+1
a <- a+1
a <- a+1
a <- a+1
a <- a+1
a <- a+1
a
#5. Functions
my_function <- function(x, y, z) {
sum <- x + y + z
sum
}
my_function(1,2,3)
$x
my_function(1:3)
my_function(1:100, 1:100, 1:100)
#6. Minimum, Maximum, Average
min(1:100)
max(1:100)
average(1:100)
avg(1:100)
ave(1:100)
mean(1:100)
??ave
x <- 5
switch(x
, 1 = 'C'
, 2 = 'D'
, 3 = 'E'
)
x <- 5
switch(x
, '1' = 'C'
, '2' = 'D'
, '3' = 'E'
)
switch(x
, '1' = print('C')
, '2' = print('D')
, '3' = print('E')
)
x <- 5
switch(x
, '1' = print('C')
, '2' = print('D')
, '3' = print('E')
)
x <- 3
switch(x
, '1' = print('C')
, '2' = print('D')
, '3' = print('E')
)
switch(x
, '1' = print('C')
, '2' = print('D')
, 3 = print('E')
)
x <- 3
switch(x
, '1' = print('C')
, '2' = print('D')
, 3 = print('E')
)
z <- 'C언어'
switch(z
, 'C언어' = print('임베디드에서 자주 사용됩니다.')
, 'java' = print('웹 프로그래밍의 왕')
, 'R' = print('통계분석, 빅데이터에서 사용')
, print('해당 언어는 모르겠습니다.')
)
#for 조건문 : 횟수 결정
v <- 1:4
for(i in v) {
print(i)
}
cnt <- 1
while(cnt < 7)
{
cnt <- cnt+1
}
while(cnt < 7)
{
cnt <- cnt+1
cnt
}
print(cnt)
while(cnt < 7)
{
cnt <- cnt+1
print(cnt)
}
cnt <- 1
while(cnt < 7)
{
cnt <- cnt+1
print(cnt)
}
### 심화 ###
#현재 저장된 변수를 조회하는 함수
ls()
objects()
# 변수에 값 담는 방법
xx <- 1
1 -> yy
zz = 1
# 변수 삭제(초기화)
rm(xx, yy, zz)
#모든 변수 초기화 방법
list = ls()
rm(list)
rm(list=ls())
#함수
#내장함수 : R 기본함수
log10(100)
#step1. 설치(최초 1회)
install.packages('lubridate')
##이미 있는건지 찾기(??)
installed.packages('lubridate') (??)
#step2. 사용
library('lubridate')
now()
#step2. 사용
library('lubridate')
#step1. 설치(최초 1회)
install.packages('lubridate')
##이미 있는건지 찾기(??)
#installed.packages('lubridate') (?? 어떻게?)
#step2. 사용
library('lubridate')
now()
now_date <- now()
now_date
#실습1 : now_date에서 연도 출력
year(now_date)
year(2020-09-12)
year(2020/09/12)
#실습2 : now_date에서 월 출력
month(now_date)
#실습3 : now_date에서 일 출력
day(now_date)
#실습4 : 1day 라는 날짜를 만들기
days(1)
#실습1 : 오늘 날짜에서 1 더하기
days(1) +1
#실습1 : 오늘 날짜에서 1 더하기
nowdate + days(1)
#실습1 : 오늘 날짜에서 1 더하기
now_date + days(1)
#실습2 : 오늘날짜에서 1주일 전 조회
now_date - days(7)
now_date - weeks(1)
#실습3 : now_date의 월을 2월로 변경
now_date <- month(2)
now_date
now_date <- now()
#실습3 : now_date의 월을 2월로 변경
month(now_date) <- month(2)
now_date
#현재날짜에서 now_date를 빼기
now() - now_date()
year(now_date) <- 2019
#now_date에서 연도 변경하기
year(now_date) <- 2019
#현재날짜에서 now_date를 빼기
now() - now_date()
#현재날짜에서 now_date를 빼기
now() - now_date
vec2 <-
data()
data()
Orange
#실습1 : Orage의 age의 가장 작은 값과 가장 큰 값을 조회
min(Orange['age'])
max(Orange['age'])
#실습3 : 중앙값 조회
median(Orange['circumference'])
#실습2 : Orange의 circumference의 평균 조회
mean(Orange['circumference'])
Orange['age']
Orange['circumference']
Orange$'age'
Orange$'circumference'
#실습2 : Orange의 circumference의 평균 조회
mean(Orange['circumference'])
mean(Orange$'circumference')
#실습1 : Orage의 age의 가장 작은 값과 가장 큰 값을 조회
Orange['age']
Orange$'age'
Orange['circumference']
Orange$'circumference'
#빈도수 계산
table(Orange$Tree)
length(Orange$Tree)
#길이 계산
length(Orange)
median(Orange$'circumference')
#실습3 : 중앙값 조회
median(Orange['circumference']) #error : 자료형
#실습1 : Orage의 age의 가장 작은 값과 가장 큰 값을 조회
class(Orange['age'])
#실습1 : Orage의 age의 가장 작은 값과 가장 큰 값을 조회
class(Orange['age'])
class(Orange$'age')
#실습1 :
Orange$Tree==2
#실습1 :
Orange[Tree==2]
#실습1 :
Orange[Orange$Tree==2]
#실습1 :
Orange$Tree==2
Orange$circumference
Orange[circumference]
Orange$circumference
Orange['circumference']
Orange['Tree'==2]
Orange['Tree']==2
#실습1 :
Orange$Tree==2
Orange$age
Orange['age']$Tree==2
Orange['age']
Orange[,'age']
#실습1 : Orange의 Tree가 2인 데이터의 age의 총합 조회
#접근 : 행조건 -> Tree == 2
head(Orange)
#실습1 : Orange의 Tree가 2인 데이터의 age의 총합 조회
#접근 : 행조건 -> Tree == 2
Orange[1,2]
#실습1 : Orange의 Tree가 2인 데이터의 age의 총합 조회
#접근 : 행조건 -> Tree == 2
Orange[Orange$Tree==2,'age']
Orange
sum(Orange[Orange$Tree==2, 'age'])
#실습2 : Orange의 age가 1000이상인 데이터의 circumference의 총합 조회
Orange$age >= 1000
sum(Orange[Orange$age >= 1000, 'circumference'])
Orange[Orange$age >= 1000, 'circumference']
#sample() : 랜덤한 값을 추출하는 함수
sample(45, 6)
sample(Orange, 6)
sample(Orange$Tree, 6)
sample(Orange$Tree, 6)
sample(Orange$age, 6)
sample(Orange$Tree, 6)
sample(Ornage$circumference, 6)
sample(Orange$Tree, 6) # => 무작위한 수와 factor형이 만들어졌다...?
sample(Orange$age, 6)  #
#데이터 형변환
num <- c(1,2,3,'4',5)
num
typeof(num)
sum(num)
as.integer(num)
sum(num)
as.integer(num)
sum(num)
typeof(num)
as.numeric(num)
typeof(num)
num <- as.numeric(num)
typeof(num)
num <- as.integer(num)
typeof(num)
sum(num)
#데이터 형변환
num <- c(1,2,3,'4',5)
num
typeof(num)
num <- as.integer(num)
typeof(num)
num <- as.double(num)
typeof(num)
num <- as.numeric(num)
typeof(num)
#숫자로 변경 불가능한 값(문자)이 껴 있는 경우
num2 <- c(1,2, 'a')
num2 <- as.numeric(num2)
num2
toupper(vec4)             #자동고침기능이 있으니 다행이지만 toUpper가 아니다.
#대소문자 변경 함수
vec4 <- c('hello', 'HELLO')
toupper(vec4)             #자동고침기능이 있으니 다행이지만 toUpper가 아니다.
tolower(vec4)
#Hello를 Hi로 변경하기
#gsub(변경할 문자열, 변경될 문자열)
gsub('Hello', 'Hi')
#Hello를 Hi로 변경하기
#gsub(변경할 문자열, 변경될 문자열)
gsub('Hello', 'Hi', a)
#문자열 변경
a <- 'Hello world, korea'
#Hello를 Hi로 변경하기
#gsub(변경할 문자열, 변경될 문자열)
gsub('Hello', 'Hi', a)
#문자열 길이 확인
length(a)
nchar(a)
#문자열 길이 확인
#length(a)는 데이터의 개수를 셈. 문자열의 길이는 length로 잴 수 없다.
a
nchar('Hello world, Korea\n')
#벡터 관련 함수
vec1 <- c('korea','it', 'r')
vec3 <- c('r', 'korea', 'it')
vec2 <- c('r', 'g class', 'it')
#union() : 합치기
union(vec1, vec2)
diff(vec1, vec2)
union(vec1, vec3)
#intersect() : 교집합(중복 추출)
intersect(vec1, vec2)
#setdiff() : 차집합
setdiff(vec1, vec2)
setdiff(vec1, vec3) #character(0)
NULL
NULL == numeric(0)
vec1 == vec3
vec1
vec3
vec1 == vec3
setequal(vec1, vec3)
#setequal() : 순서에 관계없이 원소 비교
setequal(vec1, vec2)
T
x <- c(rep('x', 5))
x
#실습 : x를 paste0()를 이용해서 x1, x2, x3, x4, x5로 출력
x <- c(rep('x',5))
paste0(x, 1:5)
#R에서 자주 사용하는 함수들
vec1 <- c(1:5)
vec1
vec2 <- letters[1:5]
vec2
vec3 <- toupper(letters[1:5])
vec3
names(vec2) <- toupper(letters[1:5])
vec2
min(vec1)
max(vec1)
#숫자로 변경 불가능한 값(문자)이 껴 있는 경우
num2 <- c(1,2, 'a')
num2 <- as.numeric(num2)
num2            #변경불가능한 것은 NA처리
as.numeric(num2)
as.character(num2)
plot(cars)
#plot(cars)
plot(Orange)
---
title: "R Notebook"
output: html_notebook
---
