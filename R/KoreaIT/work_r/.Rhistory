txt_pdf[[1]][3]
txt_pdf[[1]][4]
paste(txt_pdf[[1]][3], txt_pdf[[1]][4])
paste0(txt_pdf[[1]][3], txt_pdf[[1]][4])
txt_pdf[[1]][6]
txt_pdf[[1]][6] <- paste0(txt_pdf[[1]][3], txt_pdf[[1]][4])
txt_pdf
c(txt_pdf[[1]][3], txt_pdf[[1]][4])
#txt_pdf에서 3, 4번방 삭제하기
txt_pdf[[1]][-3]
#txt_pdf에서 3, 4번방 삭제하기
txt_pdf[[1]][c(-3,-4)]
txt_pdf_2<-txt_pdf[[1]][c(-3,-4)]
txt_pdf_2
txt_pdf<-txt_pdf[[1]][c(-3,-4)]
txt_pdf
txt_pdf[[1]]
#엑셀 형태를 가지는 데이터 읽어오기
#테이블 형태를 가짐
readLines('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_no_title.txt')
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_no_title.txt')
#맥에서 문자가 깨지면 cp949, utf-8
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_no_title.txt', encoding = 'cp949')
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_no_title.txt', encoding = 'utf-8')
mem1
mem1 = read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_no_title.txt')
mem1
names(mem1) <- c('이름', '성적', '평균')
작업
# 1. 요약정보 확인
# summary mem1
names(mem1) <- c('이름', '성적', '평균')
#데이터 읽어오고 해야 할 작업
# 1. 요약정보 확인
#데이터 읽어오고 해야 할 작업
# 1. 요약정보 확인
summary mem1
#데이터 읽어오고 해야 할 작업
# 1. 요약정보 확인
summary(mem1)
#헤더정보가 있는 데이터 읽어오기
mem2 = read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_title.txt')
mem2
#헤더정보 추출
mem2 = read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_title.txt', header = T)
mem2
head(mem2)
# 2. 상단 or 하단 6개 데이터 확인(눈으로 데이터 훑는 개념)
head(mem2), tail(mem2)
# 2. 상단 or 하단 6개 데이터 확인(눈으로 데이터 훑는 개념)
head(mem2); tail(mem2)
# 실습 :평균 이상인 데이터만 조회
summary(mem2)
mem2
mem2[mem2$평균>85.50, 3]
# 실습 : 평균점수가 평균 이상인 데이터만 조회
summary(mem2)
mem2[mem2$평균>85.50, 3]
mem2[mem2$평균>85.50, 2]
mem2[mem2$평균>85.50, 3]
mem2[mem2$평균>mean(mem2$평균), 3]
mem2[mem2$평균>80.83, 3]
mem2[mem2$평균>mean(mem2$평균), 3]
mem2[mem2$'평균'>=80.83, 3] #열 이름이 한글일 때는 가급적 ''로 표시! 호환성을 높일 수 있다.
mem2[mem2$'평균'>=mean(mem2$'평균'), 3]
grep(mem2$'평균'>=mean(mem2$'평균'), mem2)
#잡음이 섞인 데이터 처리
# skip 옵션을 사용
read.table(https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_noise.txt)
#잡음이 섞인 데이터 처리
# skip 옵션을 사용
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_noise.txt')
#노이즈 데이터로 인해 정방형 데이터가 아니면 에러 발생
#노이즈가 있는 행이 어딘지 알고 있을 때, skip 가능
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_noise.txt', header=T, skip=3)
#노이즈 데이터로 인해 정방형 데이터가 아니면 에러 발생
#노이즈가 있는 행이 어딘지 알고 있을 때, skip 가능
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_noise.txt', header=T, skip=c(2,3))
#스킵기능은 앞에밖에 안되나?
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_noise.txt', header=T, skip=3, nrow=5)
#스킵기능은 앞에밖에 안되나?
#5행까지만 읽기 : nrow옵션
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_noise.txt', header=T, skip=3, nrow=4)
#스킵기능은 앞에밖에 안되나?
#5행까지만 읽기 : nrow옵션
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_noise.txt', header=T, skip=3, nrow=5)
#구분자가 있는 경우, 임의의 구분자 정의
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_sep1.txt', header=T, sep=';')
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_sep2.txt', header=T, sep=';')
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_sep2.txt', header=T, sep=',')
#클립보드로부터 데이터 읽기
# Ctrl+C 데이터 읽기
read.table('clipboard')
#클립보드로부터 데이터 읽기
# Ctrl+C 데이터 읽기
read.table('clipboard')
#클립보드로부터 데이터 읽기
# Ctrl+C 데이터 읽기
read.table('clipboard', header=T, sep=';')
read.table('clipboard')
read.table('clipboard')
read.table('clipboard', header='\t')
read.table('clipboard', header=T, sep='\t')
read.table('clipboard', header=T, sep='\t')
#결측치 데이터 처리
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA.txt')
#결측치 데이터 처리
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA.txt',header=T, sep=',')
#결측치 데이터 처리
mem_na = read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA.txt',header=T, sep=',')
# 결측치는 NA값으로 채워진다.
#결측치 존재여부 확인하기
is.na(mem_na)
count(is.na(mem_na), TRUE)
table(is.na(mem_na), TRUE)
table(is.na(mem_na))
#열을 정의하면 더 세부적으로 확인 가능
table(is.na(mem_na$'평균'))
#결측치 채우기
mem_na[is.na(mem.na$'평균'),]
#결측치 채우기
mem_na[is.na(mem.na$'평균')]
#결측치 채우기
mem_na[is.na(mem.na)]
#열을 정의하면 더 세부적으로 확인 가능
table(is.na(mem_na$'평균'))
#결측치 채우기
mem_na[is.na(mem_na)]
#열을 정의하면 더 세부적으로 확인 가능
table(is.na(mem_na$'평균'))
# 결측치는 NA값으로 채워진다.
#결측치 존재여부 확인하기
is.na(mem_na)
#결측치 채우기
mem_na[is.na(mem_na)]
#결측치 채우기
mem_na[is.na(mem_na)] <- 0
mem_na
# 데이터 내용을 잘 알고 있을 때만 유용. 데이터 속성이 변경될 수 있다.
summary(mem_na)
# 데이터 내용을 잘 알고 있을 때만 유용. 데이터 속성이 변경될 수 있다.
summary(mem_na)
#결측치가 이미 무언가로 채워져 있는 경우
#2. 결측치 처리
read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',')
#is.na로 추적할 수 없다.
mem_na2[is.na(mem.na2)]
#is.na로 추적할 수 없다.
mem_na2[is.na(mem_na2)]
#결측치가 이미 무언가로 채워져 있는 경우
#2. NA가 아닌 결측치 처리
mem_na2 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',')
#is.na로 추적할 수 없다.
mem_na2[is.na(mem_na2)]
#is.na로 추적할 수 없다.
#무의미 데이터를 NA로 변경하기
mem_na2 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',', na.strings = '-')
mem_na2
mem_na2[is.na(mem_na2)]
mem_na2[is.na(mem_na2)] <- mean(mem_na2$'평균')
mean(mem_na2$'평균')
mean(mem_na2$'평균'>=0)
#is.na로 추적할 수 없다.
#무의미 데이터를 NA로 변경하기
mem_na2 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',', na.strings = '-')
#실습 : 결측치를 평균열의 평균으로 채우기
mean(mem_na2$'평균')
#실습 : 결측치를 평균열의 평균으로 채우기
mem_na2[is.na(mem(mem_na2$'평균')]
#실습 : 결측치를 평균열의 평균으로 채우기
mem_na2[is.na(mem(mem_na2$'평균'))]
#실습 : 결측치를 평균열의 평균으로 채우기
mem_na2[is.na(mem_na2$'평균')]
#실습 : 결측치를 평균열의 평균으로 채우기
mem_na2[is.na(mem_na2)]
#실습 : 결측치를 평균열의 평균으로 채우기
mem_na2[is.na(mem_na2)] <- 0
mean(mem_na2$'평균')
mem_na2[is.na(mem_na2)] <- as.integer(mean(mem_na2$'평균'))
#is.na로 추적할 수 없다.
#무의미 데이터를 NA로 변경하기
mem_na2 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',', na.strings = '-')
#실습 : 결측치를 평균열의 평균으로 채우기
mem_na2[is.na(mem_na2)] <- 0
mem_na2
mean(mem_na2$'평균')
mem_na2[is.na(mem_na2)] <- as.integer(mean(mem_na2$'평균'))
mem_na2
mem_na2[mem_na2$'평균'==0] <- as.integer(mean(mem_na2$'평균'))
#실습 : 결측치를 평균열의 평균으로 채우기
mem_na2[is.na(mem_na2)] <- 0
mem_na2
mean(mem_na2$'평균')
mem_na2[mem_na2$'평균'==0] <- as.integer(mean(mem_na2$'평균'))
mem_na2[mem_na2$'평균'==0,'평균균'] <- as.integer(mean(mem_na2$'평균'))
mem_na2[mem_na2$'평균'==0,'평균'] <- as.integer(mean(mem_na2$'평균'))
mem_na2
#is.na로 추적할 수 없다.
#무의미 데이터를 NA로 변경하기
mem_na2 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',', na.strings = '-')
#실습 : 결측치를 평균열의 평균으로 채우기
mem_na2[is.na(mem_na2)] <- 0
mem_na2
mean(mem_na2$'평균')
mem_na2[mem_na2$'평균'==0,'평균'] <- as.integer(mean(mem_na2$'평균'))
mem_na2
#문제점..
mean(c(90, 70, 95, 100, 66, 92, 83, 88))
mean(c(90, 70, 95, 100, 66, 92, 83, 88, 0, 0, 0))
#이 둘이 너무 다른데...?
mem_na2 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',', na.strings = '-')
mem_na2[is.na(mem_na2)] <- 0
mem_na2
mean(mem_na2$'평균')
mem_na2[mem_na2$'평균'==0,'평균'] <- 85
mem_na2
summary(mem_na2)
summary(mem_na3)
#이 둘이 너무 다른데...?
mem_na3 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',', na.strings = '-')
mem_na3[is.na(mem_na3)] <- 0
mem_na3
mean(mem_na3$'평균')
mem_na2[mem_na3$'평균'==0,'평균'] <- 85
summary(mem_na3)
mem_na2[mem_na3$'평균'==0,'평균'] <- 85
summary(mem_na3)
mem_na3
#이 둘이 너무 다른데...?
mem_na3 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',', na.strings = '-')
mem_na3[is.na(mem_na3)] <- 0
mem_na3
mean(mem_na3$'평균')
mem_na2[mem_na3$'평균'==0,'평균'] <- 85
summary(mem_na3)
mem_na2[mem_na3$'평균'==0,'평균'] <- 85
#이 둘이 너무 다른데...?
mem_na3 <- read.table('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/member_yes_NA2.txt', header=T, sep=',', na.strings = '-')
mem_na3[is.na(mem_na3)] <- 0
mem_na3
mean(mem_na3$'평균')
mem_na2[mem_na3$'평균'==0,'평균'] <- 85
summary(mem_na3)
mem_na3
#CSV용 함수
read.csv('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/fruits.csv')
readLines('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/fruits.csv')
#'순번' 메타데이터를 rowname으로 설정해주기
read.csv('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/fruits.csv', row.names = '순번')
#install.packages('xlsx'
#엑셀 패키지 설치
install.packages('xlsx')
library('xlsx')
read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\')
read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
gsub('\','/','C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\')
read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
gsub('\','/','C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\')
read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
gsub('\','/','C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\')
read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
getwd()
gsub('\\','/','C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\')
# read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
# getwd()
read.xlsx('FileAccessSample/)
# gsub('\\','/','C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\')
# read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
# getwd()
read.xlsx('FileAccessSample/fruits_etc.xlsx')
# gsub('\\','/','C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\')
# read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
# getwd()
read.xlsx('FileAccessSample/fruits_etc.xlsx', sheetIndex = 1, encoding = 'UTF-8')
read.xlsx('FileAccessSample/fruits_etc.xlsx', sheetIndex = 1)
# gsub('\\','/','C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\')
# read.xlsx(gsub('\','/',C:\GitHub\LearningProgrammingLanguages\R\KoreaIT\work_r\FileAccessSample\'))
# getwd()
read.xlsx('FileAccessSample/fruits_etc.xlsx')
read.xlsx('FileAccessSample/fruits_etc.xlsx', sheetIndex = 1)
read.xlsx('FileAccessSample/fruits_etc.xlsx', sheetIndex = 1, encoding = 'UTF-8')
#실습 : fruits2의 '구분'이 결측치인 데이터의 가격 평균 구하기
is.na(fruits2)
fruits2 <- read.xlsx('FileAccessSample/fruits_etc.xlsx', sheetIndex = 1, encoding = 'UTF-8')
#실습 : fruits2의 '구분'이 결측치인 데이터의 가격 평균 구하기
is.na(fruits2)
#실습 : fruits2의 '구분'이 결측치인 데이터의 가격 평균 구하기
fruits[is.na(fruits2)[]
#실습 : fruits2의 '구분'이 결측치인 데이터의 가격 평균 구하기
fruits[is.na(fruits2)]
#실습 : fruits2의 '구분'이 결측치인 데이터의 가격 평균 구하기
fruits[is.na(fruits2)]
#실습 : fruits2의 '구분'이 결측치인 데이터의 가격 평균 구하기
fruits2[is.na(fruits2)]
#실습 : fruits2의 '구분'이 결측치인 데이터의 가격 평균 구하기
d<- fruits2[is.na(fruits2)]
d
ftuits2$'구분'
fruits2 <- read.xlsx('FileAccessSample/fruits_etc.xlsx', sheetIndex = 1, encoding = 'UTF-8')
fㄱㄱuits2$'구분'
fruits2$'구분'
#실습 : fruits2의 '구분'이 결측치인 데이터의 가격 평균 구하기
fruits2[is.na(fruits2)] <- 3
fruits2$'구분'
fruits2[fruits2$'구분','가격']
mean(fruits2[fruits2$'구분','가격'])
fruits2[fruits2$'구분'==3,'가격']
mean(fruits2[fruits2$'구분'==3,'가격'])
fruits2[fruits2$'구분','가격']
df_web <- read.csv('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/my_lib.csv')
df_web
# 결측치 확인
is.na(df_web)
table(is.na(df_web))
str(df_web)
#훑어보기
head(df_web)
#데이터 분석을 도와주는 패키지 설치
install.packages('dplyr')
library('dplyr')
# 데이터 분석 목표 : 전국 도서관의 시도명, 시군구명, 도서관 타입을 그룹화
head(df_web)
df_web[df_web$'시도명']
df_web$'시도명'
df_web[,df_web$'시도명']
df_web[, c('시도명', '시군구명')]
#시도명으로 그룹화하기
subset(df_web, select = c('시도명', '시군구명', '도서관유형'))
df_web[, c('시도명', '시군구명', '도서관유형')]
#시도명으로 그룹화하기 : INDEX과는 개념이 다른것이라고함... 찾아보자
df_lib_g <- subset(df_web, select = c('시도명', '시군구명', '도서관유형'))
head(df_lib_g, '시도명')
#시도명으로 그룹화하기 : INDEX과는 개념이 다른것이라고함... 찾아보자
df_lib_g <- subset(df_web, select = c('시도명', '시군구명', '도서관유형'))
head(df_lib_g, '시도명')
head(df_lib_g)
group_by(df_lib_g, '시도명')
cnt <- group_by(df_lib_g, '시도명')
# 시도명, 시군구명으로 그룹화하기
group_by(df_lib_g, c('시도명', '시군구명'))
cnt <- group_by(df_lib_g, '시도명')
count(cnt)
# 시도명, 시군구명으로 그룹화하기
group_by(df_lib_g, c('시도명', '시군구명'))
# 시도명, 시군구명으로 그룹화하기
group_by(df_lib_g, '시군구명')
cnt <- group_by(df_lib_g, '시도명')
count(cnt)
group_by(df_lib_g, '시도명') #dataframe이 아닌 tibble 형태로 만들어준다.
# 시도명, 시군구명으로 그룹화하기... combine은 먹히지 않는다.
#그냥 그렇게 만들어진거임.
group_by(df_lib_g, '시도명', '시군구명')
count(cnt)
# 시도명, 시군구명으로 그룹화하기... combine은 먹히지 않는다.
#그냥 그렇게 만들어진거임.
group_by(df_lib_g, '시도명', '시군구명')
count(cnt)
# 시도명, 시군구명으로 그룹화하기... combine은 먹히지 않는다.
#그냥 그렇게 만들어진거임.
cnt <- group_by(df_lib_g, '시도명', '시군구명')
count(cnt)
cnt <- group_by(df_lib_g, 시도명)
count(cnt)
# 시도명, 시군구명으로 그룹화하기... combine은 먹히지 않는다.
#그냥 그렇게 만들어진거임.
cnt <- group_by(df_lib_g, 시도명, 시군구명)
count(cnt)
group_by(df_lib_g, 시도명) #dataframe이 아닌 tibble 형태로 만들어준다.
'
group_by(df_lib_g, '시도명') #dataframe이 아닌 tibble 형태로 만들어준다.
group_by(df_lib_g, '시도명') #dataframe이 아닌 tibble 형태로 만들어준다.
group_by(df_lib_g, 시도명) #dataframe이 아닌 tibble 형태로 만들어준다.
cnt <- group_by(df_lib_g, 시도명)
count(cnt)
# 시도명, 시군구명으로 그룹화하기... combine은 먹히지 않는다.
#그냥 그렇게 만들어진거임.
cnt <- group_by(df_lib_g, 시도명, 시군구명)
count(cnt)
cnt <- group_by(df_lib_g, 시도명)
count(cnt)
# 시도명, 시군구명으로 그룹화하기... combine은 먹히지 않는다.
#그냥 그렇게 만들어진거임.
cnt <- group_by(df_lib_g, 시도명, 시군구명)
count(cnt)
#시도명으로 그룹화하기 : INDEX과는 개념이 다른것이라고함... 찾아보자
df_lib_g <- subset(df_web, select = c('시도명', '시군구명', '도서관유형'))
head(df_lib_g)
group_by(df_lib_g, 시도명) #dataframe이 아닌 tibble 형태로 만들어준다.
#Mission : dplyr을 이용하지 않고 시도명이 서울특별시인 데이터의 개수를 구하시오
df_web <- read.csv('https://raw.githubusercontent.com/luxdolorosa/data_set/master/etc/my_lib.csv')
head(df_web)
# 시도명, 시군구명으로 그룹화하기... combine은 먹히지 않는다.
#그냥 그렇게 만들어진거임.
cnt <- group_by(df_lib_g, 시도명, 시군구명, 도서관유형)
count(cnt)
# 정렬
# arrange()로도 할 수는 있으나, 여기서는 다른 방법
cnt <- count(group_by(df_lib_g, 시도명, 시군구명))
cnt
c(order(cnt$n)) # cnt의 순서대로 정렬??
c(order(-cnt$n)) #내림차순
cnt[c(order(cnt$n)), ]
cnt[c(order(-cnt$n)), ]
cnt[c(order(cnt$n)), ] #도서관의 개수를 세는...?
cnt[c(order(-cnt$n)), ]
#데이터 저장
lib_cnt <- cnt[c(order(-cnt$n)), ]
write.table(lib_cnt, 'C:/GitHub/LearningProgrammingLanguages/R/KoreaIT/work_r/FileAccessSample/Lib_cnt.csv')
write.table(lib_cnt, 'C:/GitHub/LearningProgrammingLanguages/R/KoreaIT/work_r/FileAccessSample/Lib_cnt.txt')
write.csv(lib_cnt, 'C:/GitHub/LearningProgrammingLanguages/R/KoreaIT/work_r/FileAccessSample/Lib_cnt.csv')
getwd()
write.csv(lib_cnt, 'Lib_cnt2.csv')
#별도의 row명 삭제하기
write.csv(lib_cnt, 'C:/GitHub/LearningProgrammingLanguages/R/KoreaIT/work_r/FileAccessSample/Lib_cnt2.csv', row.names=F)
"""
연습 링크 : https://en.wikipedia.org/wiki/World_Tourism_rankings
"""
comment = """
연습 링크 : https://en.wikipedia.org/wiki/World_Tourism_rankings
"""
install.packages('rvest')
library('rvest')
install.packages('rvest')
library('rvest')
library('rvest')
install.packages('rvest')
install.packages("rvest")
library('rvest')
read_html(url)
#읽어 올 패키지 지정
url <- 'https://en.wikipedia.org/wiki/World_Tourism_rankings'
read_html(url)
read_html(url)
tour_rank <- read_html(url)
#node : "웹페이지의 요소(element)와 비슷한 개념"
#id를 가져올 땐 html_node()를, class를 가져올 때에는 html_nodes()를 활용
html_nodes(tour_rank,'.wikitable')
#node : "웹페이지의 요소(element)와 비슷한 개념"
#id를 가져올 땐 html_node()를, class를 가져올 때에는 html_nodes()를 활용
#중복된 id가 있을 수 있으므로.
tables <- html_nodes(tour_rank,'.wikitable')
#html_table(), indexing을 이용해 원하는 table을 선택할 수 있다.
html_table(tables[1])
df <- html_table(tables[[1]][1])
df <- html_table(tables[1])[[1]]
df
#열 정보 확인
str(df)
#열 정보 확인
str(df);head(df);tail(df)
select(df, Rank)
library('dplyr')
select(df, Rank)
#Rank, Destination, International 3개의 열만 남기기
df[, c(1,2,3)]
select(df, Rank, Destination, International tourist arrivals (2018)[1]
select(df, Rank, Destination, International tourist arrivals (2018)[1])
select(df, Rank, Destination, International)
#Rank, Destination, International 3개의 열만 남기기
df[, c(1,2,3)]
#Rank, Destination, International 3개의 열만 남기기
df2 <- df[, c(1,2,3)]
colnames(df2) <- c('rank', 'des', 'tour')
df2
#barplot으로 나라별 관광객 나타내기
barplot(df$rank, names.arg = df$des)
#barplot으로 나라별 관광객 나타내기
barplot(df2$rank, names.arg = df$des)
#barplot으로 나라별 관광객 나타내기
barplot(df2$rank, names.arg = df$des)
#barplot으로 나라별 관광객 나타내기
barplot(df2$rank, names.arg = df$des)
#barplot으로 나라별 관광객 나타내기
barplot(df2$rank, names.arg = df$des)
#barplot으로 나라별 관광객 나타내기
barplot(df2$rank, names.arg = df2$des) #Plot 창이 너무 작으면 에러남
df2
##gsub 활용하기
#gsub(치환할 값, 치환될 값, 데이터)
gsub(' million', '', df2$tour)
##gsub 활용하기
#gsub(치환할 값, 치환될 값, 데이터) -> 원본 영향은 없다.
df2$tour <- gsub(' million', '', df2$tour)
df2
barplot(df2$rank, names.arg = df2$des)
barplot(df2$rank, names.arg = df2$des)
barplot(df2$rank, names.arg = df2$des)
##gsub 활용하기
#gsub(치환할 값, 치환될 값, 데이터) -> 원본 영향은 없다.
df2$tour <- as.dobule(gsub(' million', '', df2$tour))
##gsub 활용하기
#gsub(치환할 값, 치환될 값, 데이터) -> 원본 영향은 없다.
df2$tour <- as.double(gsub(' million', '', df2$tour))
barplot(df2$rank, names.arg = df2$des)
#자료형도 잘 고려해야 한다. 숫자처럼 보여도 숫자가 아닐 수 있음.
df2
##gsub 활용하기
#gsub(치환할 값, 치환될 값, 데이터) -> 원본 영향은 없다.
df2$tour <- as.numeric(gsub(' million', '', df2$tour))
#자료형도 잘 고려해야 한다. 숫자처럼 보여도 숫자가 아닐 수 있음.
df2
barplot(df2$rank, names.arg = df2$des)
#자료형도 잘 고려해야 한다. 숫자처럼 보여도 숫자가 아닐 수 있음.
df2
#자료형도 잘 고려해야 한다. 숫자처럼 보여도 숫자가 아닐 수 있음.
class(df2$tour)
barplot(df2$rank, names.arg = df2$des)
barplot(df2$tour, names.arg = df2$des)
#barplot으로 나라별 관광객 나타내기
barplot(df2$rank, names.arg = df2$des) #Plot 창이 너무 작으면 에러남
barplot(df2$tour, names.arg = df2$des)
